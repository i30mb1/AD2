[versions]
room = "2.5.0-alpha03"
coroutines = "1.6.4"
moshi = "1.14.0"
dagger = "2.43.2"
workManager = "2.7.1"
lifecycle = "2.5.1"
androidGradlePlugin = "7.3.1"
lint = "30.2.2" # androidGradlePlugin + 23
kotlin = "1.7.20"
compose = "1.3.0"
composeCompiler = "1.3.2"
media3 = "1.0.0-beta02"
detekt = "1.22.0"

[libraries]
room = { module = "androidx.room:room-runtime", version.ref = "room" }
roomAnnotation = { module = "androidx.room:room-compiler", version.ref = "room" }
roomKtx = { module = "androidx.room:room-ktx", version.ref = "room" }
roomPaging = "androidx.room:room-paging:2.5.0-alpha03"

detektPlugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
detektApi = { module = "io.gitlab.arturbosch.detekt:detekt-api", version.ref = "detekt" }
detektCli = { module = "io.gitlab.arturbosch.detekt:detekt-cli", version.ref = "detekt" }
detektTest = { module = "io.gitlab.arturbosch.detekt:detekt-test", version.ref = "detekt" }

exoPlayer = { module = "androidx.media3:media3-exoplayer", version.ref = "media3" }
exoPlayerHLS = { module = "androidx.media3:media3-exoplayer-hls", version.ref = "media3" }
exoPlayerUI = { module = "androidx.media3:media3-ui", version.ref = "media3" }
exoPlayerSession = { module = "androidx.media3:media3-session", version.ref = "media3" }

coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutinesAndroid = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" } # why

moshi = { module = "com.squareup.moshi:moshi", version.ref = "moshi" } # It makes it easy to parse JSON into Kotlin objects
moshiCodegen = { module = "com.squareup.moshi:moshi-kotlin-codegen", version.ref = "moshi" } # Add codegen to moshi (generating by using @JsonClass(generateAdapter = true))
moshiKotlin = { module = "com.squareup.moshi:moshi-kotlin", version.ref = "moshi" } # Add reflection to moshi (better not to use : 2.5 MB) Moshi.Builder().add(KotlinJsonAdapterFactory()).build()
moshiAdapter = { module = "com.squareup.moshi:moshi-adapters", version.ref = "moshi" }

dagger = { module = "com.google.dagger:dagger", version.ref = "dagger" }
daggerAnnotation = { module = "com.google.dagger:dagger-compiler", version.ref = "dagger" }

workManager = { module = "androidx.work:work-runtime-ktx", version.ref = "workManager" }
workManagerGCM = { module = "androidx.work:work-gcm", version.ref = "workManager" }

livedata = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" } # liveData (LiveData + coroutines)
viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" } # viewModelScope + savedStateHandle
lifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" } # flowWithLifecycle

fragmentKtx = "androidx.fragment:fragment-ktx:1.5.2" # easy fragment transaction + by viewModels()
activityKtx = "androidx.activity:activity-ktx:1.5.1" # onBackPress support for Fragment

lintApi = { module = "com.android.tools.lint:lint-api", version.ref = "lint" }
lintChecks = { module = "com.android.tools.lint:lint-checks", version.ref = "lint" }

androidGradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "androidGradlePlugin" }

kotlinGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }

composeActivity = "androidx.activity:activity-compose:1.7.0-alpha01"
composeViewModel = "androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1"
composeCoil = "io.coil-kt:coil-compose:2.2.1"
composeFoundation = { module = "androidx.compose.foundation:foundation", version.ref = "compose" }
composeLivedata = { module = "androidx.compose.runtime:runtime-livedata", version.ref = "compose" }
composeMaterial = { module = "androidx.compose.material:material", version.ref = "compose" }
composeAnimation = { module = "androidx.compose.animation:animation", version.ref = "compose" }
composeTooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
composeUITest = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "compose" }
composePaging = "androidx.paging:paging-compose:1.0.0-alpha16"

appMetrics = "com.yandex.android:mobmetricalib:5.2.0"
palette = "androidx.palette:palette:1.0.0"
exif = "androidx.exifinterface:exifinterface:1.3.3"
metrics = "androidx.metrics:metrics-performance:1.0.0-alpha01"
preference = "androidx.preference:preference:1.1.1"
preferenceKtx = "androidx.preference:preference-ktx:1.1.1"
appCompat = "androidx.appcompat:appcompat:1.5.1"
dataStorePref = "androidx.datastore:datastore-preferences:1.0.0"
recyclerView = "androidx.recyclerview:recyclerview:1.2.1"
ticker = "com.robinhood.ticker:ticker:2.0.4"
retrofit = "com.squareup.retrofit2:retrofit:2.9.0"
retrofitMoshiConverter = "com.squareup.retrofit2:converter-moshi:2.9.0"
retrofitInterceptor = "com.squareup.okhttp3:logging-interceptor:4.10.0"
retrofitScalars = "com.squareup.retrofit2:converter-scalars:2.9.0"
paging3 = "androidx.paging:paging-runtime:3.1.1"
material = "com.google.android.material:material:1.6.1"
constraintLayout = "androidx.constraintlayout:constraintlayout:2.1.4"
coil = "io.coil-kt:coil:2.2.1"
jsoup = "org.jsoup:jsoup:1.11.2" # Jsoup для разбора html
firebaseAnal = "com.google.firebase:firebase-analytics:17.3.0"
playCoreKtx = "com.google.android.play:app-update-ktx:2.0.0" # auto update + rateMe
playReview = "com.google.android.play:review-ktx:2.0.0"
webkit = "androidx.webkit:webkit:1.4.0"
coreKtx = "androidx.core:core-ktx:1.9.0" # Write more concise, idiomatic Kotlin code.
jsonSimple = "com.googlecode.json-simple:json-simple:1.1.1"
springAnimation = "androidx.dynamicanimation:dynamicanimation:1.0.0"
springAnimationKtx = "androidx.dynamicanimation:dynamicanimation-ktx:1.0.0-alpha03"
instantApps = "com.google.android.gms:play-services-instantapps:18.0.1"
viewPager2 = "androidx.viewpager2:viewpager2:1.0.0"
splashScreen = "androidx.core:core-splashscreen:1.0.0"
performance = "androidx.core:core-performance:1.0.0-alpha02"

coroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
coroutinesDebug = "org.jetbrains.kotlinx:kotlinx-coroutines-debug:1.6.4"
testCore = "androidx.test:core:1.4.0" # Core library
testCoreKtx = "androidx.test:core-ktx:1.4.0"
testRunner = "androidx.test:runner:1.4.0" # AndroidJUnitRunner
testRules = "androidx.test:rules:1.4.0" # JUnit Rules
testJunit = "androidx.test.ext:junit:1.1.3" # Assertions and JUnit 4 framework
testJunitKtx = "androidx.test.ext:junit-ktx:1.1.3" # Assertions
testTruth2 = "com.google.truth:truth:1.1.3"
testTruth = "androidx.test.ext:truth:1.4.0"
coreTesting = "androidx.arch.core:core-testing:2.1.0"
mockitoWeb = "com.squareup.okhttp3:mockwebserver:4.4.0"
mockito = "org.mockito:mockito-core:3.2.4"
mockitokotlin = "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0" # A small library that provides helper functions to work with Mockito in Kotlin.

espresso = "androidx.test.espresso:espresso-core:3.4.0"
espressoIntents = "androidx.test.espresso:espresso-intents:3.2.0"
uiautomator = "androidx.test.uiautomator:uiautomator:2.2.0"
benchmarkMacro = "androidx.benchmark:benchmark-macro-junit4:1.2.0-alpha06"
benchmarkJunit = "androidx.benchmark:benchmark-junit4:1.1.0"

[bundles]
test = ["coroutinesTest", "testCore", "testRunner", "testRules", "testJunitKtx", "testTruth"]
compose = ["composeAnimation", "composeMaterial", "composeFoundation", "composeTooling", "composeCoil", "composeLivedata", "composeActivity"]

[plugins]
