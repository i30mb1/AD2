[versions]
sdkVersion = "34"
room = "2.6.0"
coroutines = "1.7.1"
moshi = "1.15.0"
dagger = "2.46.1"
workManager = "2.8.1"
lifecycle = "2.7.0"
androidGradlePlugin = "8.1.4"
lint = "31.1.4" # androidGradlePlugin + 23
kotlin = "1.9.20"
compose = "1.6.0-beta01"
composeCompiler = "1.5.4"
media3 = "1.2.0"
detekt = "1.22.0"
cameraX = "1.4.0-alpha02"
kotlinDL = "0.5.2"
benchmark = "1.2.2"

[libraries]
room = { module = "androidx.room:room-runtime", version.ref = "room" }
room-common = { module = "androidx.room:room-common", version.ref = "room" }
room-compiler = { module = "androidx.room:room-compiler", version.ref = "room" }
room-ktx = { module = "androidx.room:room-ktx", version.ref = "room" }
room-paging = { module = "androidx.room:room-paging", version.ref = "room" }

kotlin-dl-onnx = { module = "org.jetbrains.kotlinx:kotlin-deeplearning-onnx", version.ref = "kotlinDL" }
kotlin-dl-visualization = { module = "org.jetbrains.kotlinx:kotlin-deeplearning-visualization", version.ref = "kotlinDL" }
kotlin-dl-tensorflow = { module = "org.jetbrains.kotlinx:kotlin-deeplearning-tensorflow", version.ref = "kotlinDL" }
kotlin-dl-api = { module = "org.jetbrains.kotlinx:kotlin-deeplearning-api", version.ref = "kotlinDL" }

detektPlugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
detektApi = { module = "io.gitlab.arturbosch.detekt:detekt-api", version.ref = "detekt" }
detektCli = { module = "io.gitlab.arturbosch.detekt:detekt-cli", version.ref = "detekt" }
detektFormatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
detektTest = { module = "io.gitlab.arturbosch.detekt:detekt-test", version.ref = "detekt" }

camera = { module = "androidx.camera:camera-core", version.ref = "cameraX" }
camera-lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "cameraX" }
camera-video = { module = "androidx.camera:camera-video", version.ref = "cameraX" }
camera-view = { module = "androidx.camera:camera-view", version.ref = "cameraX" }
camera-ktx = { module = "androidx.camera:camera-extensions", version.ref = "cameraX" }

exoPlayer = { module = "androidx.media3:media3-exoplayer", version.ref = "media3" }
exoPlayerHLS = { module = "androidx.media3:media3-exoplayer-hls", version.ref = "media3" }
exoPlayerUI = { module = "androidx.media3:media3-ui", version.ref = "media3" }
exoPlayerSession = { module = "androidx.media3:media3-session", version.ref = "media3" }

coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutinesAndroid = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" } # why

moshi = { module = "com.squareup.moshi:moshi", version.ref = "moshi" } # It makes it easy to parse JSON into Kotlin objects
moshiCodegen = { module = "com.squareup.moshi:moshi-kotlin-codegen", version.ref = "moshi" } # Add codegen to moshi (generating by using @JsonClass(generateAdapter = true))
moshiKotlin = { module = "com.squareup.moshi:moshi-kotlin", version.ref = "moshi" } # Add reflection to moshi (better not to use : 2.5 MB) Moshi.Builder().add(KotlinJsonAdapterFactory()).build()
moshiAdapter = { module = "com.squareup.moshi:moshi-adapters", version.ref = "moshi" }

dagger = { module = "com.google.dagger:dagger", version.ref = "dagger" }
daggerAnnotation = { module = "com.google.dagger:dagger-compiler", version.ref = "dagger" }

workManager = { module = "androidx.work:work-runtime-ktx", version.ref = "workManager" }
workManagerGCM = { module = "androidx.work:work-gcm", version.ref = "workManager" }

lifecycle-common = { module = "androidx.lifecycle:lifecycle-common", version.ref = "lifecycle" }
livedata = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" } # liveData (LiveData + coroutines)
viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" } # viewModelScope + savedStateHandle
lifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" } # flowWithLifecycle

fragmentKtx = "androidx.fragment:fragment-ktx:1.6.2" # easy fragment transaction + by viewModels()
activity = "androidx.activity:activity:1.9.0" # onBackPress support for Fragment
composeActivity = "androidx.activity:activity-compose:1.9.0"

lintApi = { module = "com.android.tools.lint:lint-api", version.ref = "lint" }

androidGradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "androidGradlePlugin" }

kotlinGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }

kotlin-reflection = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-Serialization-Plugin = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
kotlinSerialization = "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.1"
kover = "org.jetbrains.kotlinx:kover-gradle-plugin:0.7.4"
composeViewModel = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
composeCoil = "io.coil-kt:coil-compose:2.4.0"
composeFoundation = { module = "androidx.compose.foundation:foundation", version.ref = "compose" }
composeLivedata = { module = "androidx.compose.runtime:runtime-livedata", version.ref = "compose" }
composeMaterial = { module = "androidx.compose.material:material", version.ref = "compose" }
composeAnimation = { module = "androidx.compose.animation:animation", version.ref = "compose" }
composeTooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
composeUITest = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "compose" }
composePaging = "androidx.paging:paging-compose:3.3.0-alpha02"

androidStartup = "androidx.startup:startup-runtime:1.1.1"
appMetrics = "com.yandex.android:mobmetricalib:5.2.0"
palette = "androidx.palette:palette:1.0.0"
exif = "androidx.exifinterface:exifinterface:1.3.6"
metrics = "androidx.metrics:metrics-performance:1.0.0-alpha04"
preference = "androidx.preference:preference:1.2.1"
preferenceKtx = "androidx.preference:preference-ktx:1.2.1"
appCompat = "androidx.appcompat:appcompat:1.6.1"
dataStorePref = "androidx.datastore:datastore-preferences:1.0.0"
recyclerView = "androidx.recyclerview:recyclerview:1.3.2"
ticker = "com.robinhood.ticker:ticker:2.0.4"
retrofit = "com.squareup.retrofit2:retrofit:2.9.0"
retrofitSerialization = "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:1.0.0"
retrofitMoshiConverter = "com.squareup.retrofit2:converter-moshi:2.9.0"
retrofitInterceptor = "com.squareup.okhttp3:logging-interceptor:4.11.0"
retrofitScalars = "com.squareup.retrofit2:converter-scalars:2.9.0"
paging3 = "androidx.paging:paging-runtime:3.2.1"
material = "com.google.android.material:material:1.10.0"
constraintLayout = "androidx.constraintlayout:constraintlayout:2.1.4"
coil = "io.coil-kt:coil:2.4.0"
jsoup = "org.jsoup:jsoup:1.11.2" # Jsoup для разбора html
firebaseAnal = "com.google.firebase:firebase-analytics:21.5.0"
playCoreKtx = "com.google.android.play:app-update-ktx:2.1.0" # auto update + rateMe
playReview = "com.google.android.play:review-ktx:2.0.1"
webkit = "androidx.webkit:webkit:1.8.0"
coreKtx = "androidx.core:core-ktx:1.12.0" # Write more concise, idiomatic Kotlin code.
jsonSimple = "com.googlecode.json-simple:json-simple:1.1.1"
springAnimation = "androidx.dynamicanimation:dynamicanimation:1.0.0"
springAnimationKtx = "androidx.dynamicanimation:dynamicanimation-ktx:1.0.0-alpha03"
instantApps = "com.google.android.gms:play-services-instantapps:18.0.1"
viewPager2 = "androidx.viewpager2:viewpager2:1.0.0"
splashScreen = "androidx.core:core-splashscreen:1.0.1"
performance = "androidx.core:core-performance:1.0.0-beta02"
performancePlayServices = "androidx.core:core-performance-play-services:1.0.0-beta02"

test-lifecycle = { module = "androidx.lifecycle:lifecycle-runtime-testing", version.ref = "lifecycle" }
coroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
coroutinesDebug = "org.jetbrains.kotlinx:kotlinx-coroutines-debug:1.7.1"
testCore = "androidx.test:core:1.5.0" # Core library
testCoreKtx = "androidx.test:core-ktx:1.5.0"
test-runner = "androidx.test:runner:1.5.2" # AndroidJUnitRunner
testRules = "androidx.test:rules:1.5.0" # JUnit Rules
test-junit = "junit:junit:4.13.2" # Assertions and JUnit 4 framework
test-junit-kotlin = "androidx.test.ext:junit-ktx:1.1.5" # Assertions
testTruth = "androidx.test.ext:truth:1.5.0"
testTruthJvm = "com.google.truth:truth:1.1.5"
coreTesting = "androidx.arch.core:core-testing:2.2.0"
test-fragment = "androidx.fragment:fragment-testing:1.6.2"
mockk = "io.mockk:mockk-android:1.13.8"
test-robolectric = "org.robolectric:robolectric:4.11.1"
test-uiautomator = "androidx.test.uiautomator:uiautomator:2.3.0-alpha03"

test-espresso = "androidx.test.espresso:espresso-core:3.5.1"
espressoIntents = "androidx.test.espresso:espresso-intents:3.5.1"
uiautomator = "androidx.test.uiautomator:uiautomator:2.2.0"
benchmarkMacro = { module = "androidx.benchmark:benchmark-macro-junit4", version.ref = "benchmark" }
benchmarkJunit = { module = "androidx.benchmark:benchmark-junit4", version.ref = "benchmark" }

[bundles]
test = ["coroutinesTest", "testCore", "test-runner", "testRules", "test-junit-kotlin", "testTruth"]
compose = ["composeAnimation", "composeMaterial", "composeFoundation", "composeTooling", "composeCoil", "composeLivedata", "composeActivity"]
camera = ["camera", "camera-lifecycle", "camera-video", "camera-view", "camera-ktx"]
kotlinDL = ["kotlin-dl-onnx", "kotlin-dl-visualization", "kotlin-dl-tensorflow"]

[plugins]
benchmark = { id = "androidx.benchmark", version.ref = "benchmark" }
